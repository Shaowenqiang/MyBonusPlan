<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:context="http://www.springframework.org/schema/context"       xmlns:jee="http://www.springframework.org/schema/jee"       xmlns:tx="http://www.springframework.org/schema/tx"       xmlns:rabbit="http://www.springframework.org/schema/rabbit"       xmlns:util="http://www.springframework.org/schema/util"       xmlns:aop="http://www.springframework.org/schema/aop"       xmlns:mvc="http://www.springframework.org/schema/mvc"       xsi:schemaLocation="http://www.springframework.org/schema/beans     http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/jee     http://www.springframework.org/schema/jee/spring-jee.xsd     http://www.springframework.org/schema/context     http://www.springframework.org/schema/context/spring-context.xsd     http://www.springframework.org/schema/tx     http://www.springframework.org/schema/tx/spring-tx.xsd     http://www.springframework.org/schema/rabbit     http://www.springframework.org/schema/rabbit/spring-rabbit.xsd     http://www.springframework.org/schema/util     http://www.springframework.org/schema/util/spring-util.xsd     http://www.springframework.org/schema/aop     http://www.springframework.org/schema/aop/spring-aop.xsd     http://www.springframework.org/schema/mvc     http://www.springframework.org/schema/mvc/spring-mvc.xsd">    <context:component-scan base-package="com.swq"></context:component-scan>    <context:annotation-config/>    <!-- 配置数据库连接池 -->    <bean id="propertyConfigurer"          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">        <property name="order" value="1" />        <property name="ignoreUnresolvablePlaceholders" value="true" />        <property name="locations">            <list>                <value>classpath:conf/properties/dbconfig.properties</value>            </list>        </property>    </bean>    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"          init-method="init" destroy-method="close">        <property name="driverClassName" value="${driverClassName}"/>        <property name="url" value="${url}"/>        <property name="username" value="${username}"/>        <property name="password" value="${password}"/>        <property name="filters" value="stat,config"/>       <!-- <property name="proxyFilters">            <list>                <ref bean="stat-filter" />            </list>        </property>-->        <property name="connectionProperties" value="config.decrypt=true;config.decrypt.key=${publicKey}"/>        <property name="maxActive" value="300"/>        <property name="minIdle" value="50"/>        <property name="maxWait" value="1800000"/>        <property name="validationQuery" value="select 1 from dual"/>    </bean>    <!-- druid spring monitor setting -->    <bean id="druid-stat-interceptor"          class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">    </bean>    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"          scope="prototype">        <property name="patterns">            <list>                <value>com.swq.service.*</value>                <value>com.swq.dao.*</value>            </list>        </property>    </bean>    <!-- spring和mybatis结合配置 -->    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">        <property name="dataSource" ref="dataSource"/>        <!-- 自动扫描mapping.xml文件 -->        <property name="mapperLocations" value="classpath*:conf/mybatis/*.xml"/>        <property name="plugins">            <list>                <bean class="com.github.pagehelper.PageHelper">                    <property name="properties">                        <props>                            <prop key="dialect">mysql</prop>                        </props>                    </property>                </bean>            </list>        </property>    </bean>    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">        <property value="com.swq.dao" name="basePackage"/>        <property value="sqlSessionFactory" name="sqlSessionFactoryBeanName"/>    </bean>    <bean id="jobBean" class="com.swq.util.MyTask"/>    <bean id="myJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">        <property name="targetObject">            <ref bean="jobBean"/>        </property>        <property name="targetMethod">            <value>execute</value><!--任务类中的方法名-->        </property>        <!--将并发设置为false-->        <property name="concurrent" value="false" />    </bean>    <!-- 指定时间 -->    <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">        <property name="jobDetail" ref="myJobDetail"></property>        <property name="cronExpression" value="0 * 13 * * ?"></property>    </bean>    <!-- 总管理类如果将lazy-init='false'那么容器启动就会执行调度程序 -->    <bean id="startQuertz" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" lazy-init="false" autowire="no">        <property name="triggers">            <list>                <!--作业调度器,list下可加入其他的调度器-->                <ref bean="cronTrigger" />            </list>        </property>    </bean>    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->    <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="txManager">        <property name="dataSource" ref="dataSource"/>    </bean>    <!-- 事务策略  -->    <tx:advice id="txAdvice" transaction-manager="txManager">        <tx:attributes>            <tx:method name="save*" rollback-for="java.lang.Exception" propagation="REQUIRED"/>            <tx:method name="delete*" propagation="REQUIRED" no-rollback-for="java.lang.Exception"/>            <tx:method name="del*" propagation="REQUIRED" no-rollback-for="java.lang.Exception"/>            <tx:method name="update*" rollback-for="java.lang.Exception" propagation="REQUIRED"/>        </tx:attributes>    </tx:advice>    <tx:annotation-driven proxy-target-class="true" transaction-manager="txManager"/></beans>